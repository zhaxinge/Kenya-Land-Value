# Print the file name
print(gdf)
library(stars)
library(stars)
folder_path <- "~/Github/kanyan/data/raw/grid"
# List all files in the folder
file_list <- list.files(folder_path)
# Iterate over the files
for (file in file_list) {
file_path <- file.path(folder_path, file)
s <- read_stars(file_path)
gdf <- as.data.frame(s)
# Print the file name
print(gdf)
}
library(stars)
folder_path <- "~/Github/kanyan/data/raw/grid"
# List all files in the folder
file_list <- list.files(folder_path, pattern = "\\.shp$", full.names = TRUE)
# Iterate over the files
for (file in file_list) {
file_path <- file.path(folder_path, file)
s <- read_stars(file_path)
gdf <- as.data.frame(s)
# Print the file name
print(gdf)
}
library(stars)
folder_path <- "~/Github/kanyan/data/raw/grid"
# List all files in the folder
file_list <- list.files(folder_path, pattern = "\\.shp$", full.names = TRUE)
# Iterate over the files
for (file in file_list) {
file_path <- file
s <- read_stars(file_path)
gdf <- as.data.frame(s)
# Print the file name
print(gdf)
}
library(stars)
folder_path <- "~/Github/kanyan/data/raw/grid"
# List all files in the folder
file_list <- list.files(folder_path, pattern = "\\.shp$", full.names = TRUE)
# Iterate over the files
for (file in file_list) {
if (!is.na(file)) {
file_path <- file
s <- read_stars(file_path)
gdf <- as.data.frame(s)
# Print the file name
print(gdf)
}
}
library(stars)
folder_path <- "~/Github/kanyan/data/raw/grid"
# List all files in the folder
file_list <- list.files(folder_path, pattern = "\\.shp$", full.names = TRUE)
# Iterate over the files
for (file in file_list) {
if (!is.na(file)) {
file_path <- file
s <- read_stars(file_path)
#gdf <- as.data.frame(s)
# Print the file name
#print(gdf)
}
}
file_path
read_stars(file_path)
sh <- st_read(file_path)
st <- sf_as_st(sh)
# Set the path to your shapefile
shapefile <- "~/Github/kanyan/data/raw/grid/grid_Eldoret.shp"
# Read the shapefile as a Spatial object
shape <- shapefile(shapefile)
# Read the shapefile as a Spatial object
shape <- st_read(shapefile)
# Create an empty raster with the desired resolution and extent
res <- 100  # Pixel size in units of the shapefile's coordinate system
ext <- extent(shape)
library(raster)
# Create an empty raster with the desired resolution and extent
raster <- raster('C:/Users/DELL/Documents/Github/kanyan/data/int/img_matrices/Eldoret.tif')
# Rasterize each geometry in the shapefile onto the empty raster
rasterized <- rasterize(shape, raster)
as.data.frame(rasterize)
as.dataframe(rasterize)
as.data.frame(rasterize)
# Save the raster as a GeoTIFF
output_file <- 'C:/Users/DELL/Documents/Github/kanyan/data/int/img_matrices/label_Eldoret.tif
writeRaster(rasterized, output_file, format = "GTiff", overwrite = TRUE)
# Save the raster as a GeoTIFF
output_file <- 'C:/Users/DELL/Documents/Github/kanyan/data/int/img_matrices/label_Eldoret.tif'
writeRaster(rasterized, output_file, format = "GTiff", overwrite = TRUE)
sh <- read_stars(output_file)
gdf <- as.data.frame(sh)
gdf[3]
omit.na(gdf[3])
na.omit(gdf[3])
is.na(gdf[3])
is.nan(gdf[3])
gdf[-is.na(gdf[3])]
file_list
img_path <- "~/Github/kanyan/data/int/img_matrices"
img_list <- list.files(img_path, pattern = "\\.tif$", full.names = TRUE)
shapefile_path <- "~/Github/kanyan/data/raw/grid"
shapefile_list <- list.files(shapefile_path, pattern = "\\.shp$", full.names = TRUE)
# Iterate over the files
for (shapefile in shapefile_list) {
if (!is.na(shapefile)) {
city_name <- sub(".*grid_(.*)\\.shp", "\\1", file_path)
print(city_name)
}
}
shapefile_list
# Iterate over the files
for (shapefile in shapefile_list) {
if (!is.na(shapefile)) {
city_name <- sub(".*grid_(.*)\\.shp", "\\1", file_path)
print(city_name)
}
}
# Iterate over the files
for (shapefile in shapefile_list) {
if (!is.na(shapefile)) {
city_name <- sub(".*grid_(.*)\\.shp", "\\1", shapefile)
print(city_name)
}
}
img_path <- "~/Github/kanyan/data/int/img_matrices"
img_list <- list.files(img_path, pattern = "\\.tif$", full.names = TRUE)
shapefile_path <- "~/Github/kanyan/data/raw/grid"
shapefile_list <- list.files(shapefile_path, pattern = "\\.shp$", full.names = TRUE)
# Iterate over the files
for (shapefile in shapefile_list) {
if (!is.na(shapefile)) {
city_name <- sub(".*grid_(.*)\\.shp", "\\1", shapefile)
print(city_name)
img_path <- "~/Github/kanyan/data/int/img_matrices/"+ city_name +".tif"
}
}
img_path <- "~/Github/kanyan/data/int/img_matrices"
img_list <- list.files(img_path, pattern = "\\.tif$", full.names = TRUE)
shapefile_path <- "~/Github/kanyan/data/raw/grid"
shapefile_list <- list.files(shapefile_path, pattern = "\\.shp$", full.names = TRUE)
# Iterate over the files
for (shapefile in shapefile_list) {
if (!is.na(shapefile)) {
city_name <- sub(".*grid_(.*)\\.shp", "\\1", shapefile)
print(city_name)
img_path <- paste0("~/Github/kanyan/data/int/img_matrices/",city_name,".tif")
}
}
# Iterate over the files
for (shapefile in shapefile_list) {
if (!is.na(shapefile)) {
city_name <- sub(".*grid_(.*)\\.shp", "\\1", shapefile)
print(city_name)
img_path <- paste0("~/Github/kanyan/data/int/img_matrices/",city_name,".tif")
print(img_path)
}
}
library(stars)
library(raster)
shapefile_path <- "~/Github/kanyan/data/raw/grid"
shapefile_list <- list.files(shapefile_path, pattern = "\\.shp$", full.names = TRUE)
library(stars)
library(raster)
shapefile_path <- "~/Github/kanyan/data/raw/grid"
shapefile_list <- list.files(shapefile_path, pattern = "\\.shp$", full.names = TRUE)
# Iterate over the files
for (shapefile in shapefile_list) {
if (!is.na(shapefile)) {
city_name <- sub(".*grid_(.*)\\.shp", "\\1", shapefile)
print(city_name)
shape<- st_read(shapefile)
img_path <- paste0("~/Github/kanyan/data/int/img_matrices/",city_name,".tif")
print(img_path)
raster <- read_stars(img_path)
rasterized <- rasterize(shape, raster)
output_path <- paste0('C:/Users/DELL/Documents/Github/kanyan/data/int/img_matrices/label_',city_name,'.tif')
writeRaster(rasterized, output_path, format = "GTiff", overwrite = TRUE)
sh <- read_stars(output_path)
gdf <- as.data.frame(sh)
file_path <- paste0('C:/Users/DELL/Documents/Github/kanyan/data/int/img_matrices/label_',city_name,'.csv')
# Save the data frame as a CSV file
write.csv(gdf, file = file_path, row.names = FALSE)
# Print a success message
print("CSV file saved successfully.")
}
}
# Iterate over the files
for (shapefile in shapefile_list) {
if (!is.na(shapefile)) {
city_name <- sub(".*grid_(.*)\\.shp", "\\1", shapefile)
print(city_name)
shape<- st_read(shapefile)
img_path <- paste0("~/Github/kanyan/data/int/img_matrices/",city_name,".tif")
print(img_path)
raster <- raster(img_path)
rasterized <- rasterize(shape, raster)
output_path <- paste0('C:/Users/DELL/Documents/Github/kanyan/data/int/img_matrices/label_',city_name,'.tif')
writeRaster(rasterized, output_path, format = "GTiff", overwrite = TRUE)
sh <- read_stars(output_path)
gdf <- as.data.frame(sh)
file_path <- paste0('C:/Users/DELL/Documents/Github/kanyan/data/int/img_matrices/label_',city_name,'.csv')
# Save the data frame as a CSV file
write.csv(gdf[c(3)], file = file_path, row.names = FALSE)
# Print a success message
print("CSV file saved successfully.")
}
}
warnings()
View(gdf)
gdf[-is.na(gdf[3])]
